# Nom du workflow
name: Build and Deploy Spring Boot Application

# √âv√©nement qui d√©clenche le workflow
on:
  # push:
    # branches: [ "main" ] # Branche sur laquelle le workflow sera ex√©cut√©
  pull_request:
    branches: [ "main" ] # Branche sur laquelle le workflow sera ex√©cut√©


# D√©finition des t√¢ches √† ex√©cuter
jobs:
  build-and-deploy: # Nom de la t√¢che
    runs-on: ubuntu-latest # Syst√®me d'exploitation sur lequel la t√¢che sera ex√©cut√©e
    steps: # Liste des √©tapes √† ex√©cuter
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."


      - name: Checkout code # Nom de l'√©tape
        uses: actions/checkout@v2 # Action qui clone le d√©p√¥t GitHub sur le runner
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."


      - name: Set up JDK 17 # Nom de l'√©tape
        uses: actions/setup-java@v2 # Action qui installe le JDK 17 sur le runner
        with:
          java-version: '17' # Version du JDK √† installer
          distribution: 'temurin' # Distribution du JDK √† installer
          cache: maven #  Cache Maven √† utiliser pour stocker les d√©pendances t√©l√©charg√©es ('acc√©l√©rer les builds).


      - name: Build with Maven # Nom de l'√©tape
        run: mvn clean package -DskipTests --file pom.xml # Commande qui construit l'application Spring Boot avec Maven


      - name: Copy WAR file to VPS user # Nom de l'√©tape
        uses: appleboy/scp-action@master # Action qui copie les fichiers sur le serveur via SCP
        with:
          host: ${{ secrets.IP_VPS }} # Adresse IP ou nom d'h√¥te du serveur
          username: ${{ secrets.USERNAME }} # Nom d'utilisateur sur le serveur
          key: ${{ secrets.PRIVATE_SSH_KEY }} # Cl√© SSH priv√©e pour se connecter au serveur, stock√©e en tant que secret GitHub
          port: 22 # Port SSH du serveur
          source: /github/workspace/target/mushroomkingdom-api.war
          target: /home/lova/application_web-eric # R√©pertoire cible sur le serveur


      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."


      - name: Copy WAR file to Tomcat webapps directory # Nom de l'√©tape
        uses: appleboy/ssh-action@master # Action qui ex√©cute des commandes SSH sur le serveur
        with:
          host: ${{ secrets.IP_VPS }} # Adresse IP ou nom d'h√¥te du serveur
          username: ${{ secrets.USERNAME }} # Nom d'utilisateur sur le serveur
          key: ${{ secrets.PRIVATE_SSH_KEY }} # Cl√© SSH priv√©e pour se connecter au serveur, stock√©e en tant que secret GitHub
          port: 22 # Port SSH du serveur
          script: | # Commande(s) √† ex√©cuter sur le serveur
            echo "Racine: ${{ github.workspace }}"
            if [ -e "${{ github.workspace }}/target/mushroomkingdom-api.war" ]; then
              echo "Le chemin existe."
            else
              echo "Le chemin n'existe pas."
            fi
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S cp -r /home/lova/application_web-eric/github/workspace/target/mushroomkingdom-api.war /opt/tomcat/apache-tomcat-10.1.23/webapps/mushroomkingdom-api.war # Copie le fichier WAR dans le r√©pertoire cible
        env:
          SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
