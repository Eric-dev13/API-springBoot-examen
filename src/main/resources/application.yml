# ===============================================
# = CONFIGURATION DU SERVER WEB EMBARQUE TOMCAT =
# ===============================================
# Spring Boot incluent par défaut un serveur Web intégré préconfiguré, adresse et port du serveur  8080 par défaut.
server:
  port: 9000


# ======================================
# = CONFIGURATION DE LA JOURNALISATION =
# ======================================
logging:
  level:
    # Permet de voir dans la console le port utilisé par Tomcat au démarrage
    org.springframework.boot.web.embedded.tomcat: INFO
    root: INFO
    com.api: DEBUG

# =============================
# = DEFINIR PLUSIEURS PROFILS =
# =============================
# https://www.baeldung.com/spring-profiles

# deux profils : "dev" et "prod". Le profil actif est défini sur "dev"
spring:
  profiles:
    # profil a charger par défaut defini dans application.yml
    active: dev
    # Profil Maven : peut être activé via la propriété de configuration spring.profiles.active
    #	Sa valeur sera utilisée pour remplacer l' espace réservé @spring.profiles.active@ dans application.properties ou application.yml
    # active: @spring.profiles.active@



---
# =================================
# = PROFIL PHASE DE DEVELOPPEMENT =
# =================================
spring:
  #  Définir des propriétés spécifiques pour chaque profil
  config:
    activate:
      on-profile: dev

  # ============================================
  # = CONFIGURATION DE LA SOURCE DE DONNEE MySQL =
  # ============================================
  datasource:
    url: jdbc:mysql://localhost:3306/mushroom
    username: root
    password:
    driver-class-name: com.mysql.cj.jdbc.Driver
    initialization-mode: always

  # ===========================================================
  # = CONFIGURATION DES PROPRIETES JPA (Java Persistence API) =
  # ===========================================================
  jpa:
    hibernate:
      ddl-auto: create-drop     # Hibernate va créer le schéma de base de données à partir des entités annotées. À la fin de l'application, le schéma sera supprimé.
      # ddl-auto: create        # Hibernate va créer le schéma de base de données à partir des entités annotées. Si des tables existent déjà, elles seront supprimées et recréées.
      # ddl-auto: none          # Aucune action DDL automatique ne sera effectuée par Hibernate. Cela signifie que vous devez gérer manuellement la création et la mise à jour des schémas de base de données.
      # ddl-auto: update        # Hibernate va mettre à jour le schéma de base de données pour refléter les changements apportés aux entités annotées. Cela peut inclure la création de nouvelles tables, l'ajout de nouvelles colonnes, etc. Les données existantes ne seront pas supprimées.
      # ddl-auto: validate      # Hibernate va valider le schéma de base de données par rapport aux entités annotées, mais aucune modification ne sera apportée à la base de données.

    # Pour générer la base de données et y ajouter un jeu de données à partir d'un script (src/main/resources/data.sql) avec les commandes SQL d'insertion des données.
    defer-datasource-initialization: true
    # Cette propriété spécifie si l'initialisation du pool de connexions de la base de données doit être différée ou non.
    #   Lorsque cette propriété est définie à true, cela signifie que l'initialisation du pool de connexions ne sera pas effectuée immédiatement au démarrage de l'application, mais plutôt à la première demande de connexion à la base de données.
    #   Si elle est définie à false, le pool de connexions sera initialisé dès le démarrage de l'application.

    # Le moyen le plus simple de vider les requêtes sql vers la sortie standard mais a priori non recommandé
    show-sql: true
    properties:
      hibernate:
        # Pour embellir
        format_sql: true
        #database: mysql
        #database-plateform:


  # Veuillez noter que pour toute initialisation basée sur un script, c’est-à-dire l’insertion de données via des données.sql
    # ou la création de schéma via un schéma.sql, nous devons définir la propriété ci-dessous:
  sql:
    init:
      mode: always


---
# ==============================
# = PROFIL PHASE DE PRODUCTION =
# ==============================
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: jdbc:mysql://localhost:3306/proddatabase
    username: produser
    password: prodpassword
