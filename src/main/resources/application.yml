# ==========================
#         PROFIL GENERAL
# ==========================
# ============================================================================
# = CONFIGURATION DE L'INTEGRITE DES JETONS POUR EMPECHER LEUR FALSIFICATION =
# ============================================================================
#  Cette clé de 256 bits est considérée comme très robuste en termes de sécurité, offrant une forte protection contre les attaques par force brute et les tentatives de craquage de la clé. Elle est généralement utilisée pour sécuriser des systèmes sensibles, tels que la génération et la validation de tokens JWT (JSON Web Tokens), comme dans votre exemple.
# "${jwt.signing.secret-key}" = signingKey
jwt:
  signing:
    secret-key: 72357538782F4125442A472D4B6150645367566B597033733676397924422645

# ======================================
# = CONFIGURATION DE LA JOURNALISATION =
# ======================================
logging:
  level:
    # Permet de voir dans la console le port utilisé par Tomcat au démarrage
    org.springframework.boot.web.embedded.tomcat: INFO
    # Niveau de journalisation pour l'ensemble de l'application
    root: INFO
    # Configuration spécifique pour une classe ou un package
    com.api: DEBUG
  file: /log/myapp.log

# =======================
# =  PROFIL PAR DEFAUT  =
# =======================
# https://www.baeldung.com/spring-profiles

# deux profils : "dev" et "prod". Le profil actif est défini sur "dev"
spring:
  profiles:
    # profil a charger par défaut defini dans application.yml
    active: dev
    # Profil Maven : peut être activé via la propriété de configuration spring.profiles.active
    #	Sa valeur sera utilisée pour remplacer l'espace réservé @spring.profiles.active@ dans application.properties ou application.yml
    # active: @spring.profiles.active@

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

---
# ==========================
#         PROFIL DEV
# ==========================

# ===============================================
# = CONFIGURATION DU SERVER WEB EMBARQUE TOMCAT =
# ===============================================
# Spring Boot incluent par défaut un serveur Web intégré préconfiguré, adresse et port du serveur  8080 par défaut.
server:
  port: 8080
# =================================
# = PROFIL PHASE DE DEVELOPPEMENT =
# =================================
# domaine : protection CORS (laisse passer l'url spécifiée)
domaine: http://localhost:4200

spring:
  # Définir des propriétés spécifiques pour chaque profil
  config:
    activate:
      on-profile: dev

  security:
    user:
      failedLoginAttempts: 3
      accountLockDuration: 5m

  # ==============================================
  # = CONFIGURATION DE LA SOURCE DE DONNEE MySQL =
  # ==============================================
  datasource:
    # S'assurer que toute connexion à la base de données est conforme à l’encodage UTF-8.
    url: jdbc:mysql://localhost:3306/mushroom?useUnicode=yes;characterEncoding=UTF-8
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
    #  exécute le fichier data.sql lors du démarrage de votre application: always / never
    # initialization-mode: always # décommenter pour docker
    #  spécifiez le chemin du fichier data.sql dans l'application Spring Boot
    # data: classpath:database.sql # décommenter pour docker

  # ===========================================================
  # = CONFIGURATION DES PROPRIETES JPA (Java Persistence API) =
  # ===========================================================
  jpa:
    # database-platform: org.hibernate.dialect.MariaDBDialect
    hibernate:
#      connection:
#        CharSet: utf-8
#        characterEncoding: utf-8
#        useUnicode: true
      ddl-auto: update # create-drop # Hibernate va créer le schéma de base de données à partir des entités annotées. À la fin de l'application, le schéma sera supprimé.
      # ddl-auto: create        # Hibernate va créer le schéma de base de données à partir des entités annotées. Si des tables existent déjà, elles seront supprimées et recréées.
      # ddl-auto: none          # Aucune action DDL automatique ne sera effectuée par Hibernate. Cela signifie que vous devez gérer manuellement la création et la mise à jour des schémas de base de données.
      # ddl-auto update         # Hibernate va mettre à jour le schéma de base de données pour refléter les changements apportés aux entités annotées. Cela peut inclure la création de nouvelles tables, l'ajout de nouvelles colonnes, etc. Les données existantes ne seront pas supprimées.
      # ddl-auto: validate      # Hibernate va valider le schéma de base de données par rapport aux entités annotées, mais aucune modification ne sera apportée à la base de données.

    # Pour générer la base de données et y ajouter un jeu de données à partir d'un script (src/main/resources/data.sql) avec les commandes SQL d'insertion des données.
    defer-datasource-initialization: true
    # Cette propriété spécifie si l'initialisation du pool de connexions de la base de données doit être différée ou non.
    #   Lorsque cette propriété est définie à true, cela signifie que l'initialisation du pool de connexions ne sera pas effectuée immédiatement au démarrage de l'application, mais plutôt à la première demande de connexion à la base de données.
    #   Si elle est définie à false, le pool de connexions sera initialisé dès le démarrage de l'application.

    # Le moyen le plus simple de vider les requêtes sql vers la sortie standard mais a priori non recommandé
    ##show-sql: true
    ##properties:
      ##hibernate:
        # Pour embellir
        ##format_sql: true

  # Configuration pour l'initialisation SQL
  sql:
    init:
      #  Définir l'encodage à utiliser lors de l'initialisation de la base de données à partir de scripts SQL.
      encoding: UTF-8
      # Exécute l’insertion de données via le fichier data.sql lors du démarrage de votre application: always / never
      mode: never

---

# ==========================
#         PROFIL PROD
# ==========================
domaine: https://mushroomkingdom.ddns.net

spring:
  config:
    activate:
      on-profile: prod

  datasource:
    url: jdbc:mariadb://localhost:3306/mushroom?useUnicode=yes&characterEncoding=UTF-8
    username: springboot
    password: auth-for@Mariadb&13009
    driver-class-name: org.mariadb.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: none # create-drop
    defer-datasource-initialization: true

  # Configuration pour l'initialisation SQL
  sql:
    init:
      #  Définir l'encodage à utiliser lors de l'initialisation de la base de données à partir de scripts SQL.
      encoding: UTF-8
      # Exécute l’insertion de données via le fichier data.sql lors du démarrage de votre application: always / never
      mode: never